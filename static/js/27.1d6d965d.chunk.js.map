{"version":3,"file":"static/js/27.1d6d965d.chunk.js","mappings":"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","sources":["components/FAButton/FAButtonStyle.js","components/FAButton/FAButton.js","components/FAInput/FAInputStyles.js","components/FAInput/FAInput.js","components/FANavBar/FANavBarStyle.js","utility/utility.js","store/actions/tasks.js","components/FANavBar/FANavBar.js","modules/dashbord/dashboardStyle.js","modules/dashbord/DashboardEmpty.js","hooks/useIsMobile.js","modules/dashbord/taskValidationSchema.js","modules/dashbord/DashboardAddTaskEditModal.js","modules/dashbord/Chart.js","modules/dashbord/DashboardStatus.js","modules/dashbord/DashboardTaskList.js","modules/dashbord/TaskHeader.js","modules/dashbord/Dashboard.container.js","styles/constants.js"],"sourcesContent":["import { Button } from \"antd\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled(Button)`\n   background: #5285EC 0% 0% no-repeat padding-box;\n   border-radius: 8px;\n   border-color: #5285EC;\n   opacity: 1;\n   color: #FFFFFF;\n   width: ${(props) => (props.width)};\n   height: ${(props) => (props.height)};\n`\n\nexport {\n    StyledButton\n}","import { StyledButton } from \"./FAButtonStyle\"\n\nconst FAButton = ({ btnText, width, height, onClick }) => {\n    return <StyledButton onClick={() => onClick()} width={width} height={height}>{btnText}</StyledButton>\n}\n\nexport default FAButton;","import { Input } from \"antd\";\nimport styled from \"styled-components\";\n\nconst StyledInput = styled(Input)`\n    margin-bottom: 12px;\n    border-radius: 8px;\n    height: 40px;\n`\n\nexport {\n    StyledInput\n}","import { StyledInput } from \"./FAInputStyles\";\n\nconst FAInput = ({ placeholder, onChange, type, name, id,value }) => {\n    return <StyledInput value={value} name={name} id={id} onChange={onChange} type={type} placeholder={placeholder} variant=\"filled\" />\n}\n\nexport default FAInput","import styled from 'styled-components';\nimport { Avatar, Button } from 'antd';\nimport { size } from '../../styles/constants';\n\nconst NavbarContainer = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #fff; \n  padding: 0 20px;\n  box-shadow: 0 1px 4px #00000029; \n  height: 72px; \n\n  \n  @media (max-width: ${size.tablet}) {\n    padding: 0 10px !important;  \n  }\n`;\n\n\nconst NavbarLeft = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\n\nconst StyledAvatar = styled(Avatar)`\n    width: 40px;\n    height: 40px;\n  @media (max-width: 768px) {\n    width: 40px;\n    height: 40px;\n  }\n`;\n\nconst Username = styled.span`\n  font-size: 18px;\n  color: #555;\n  margin-left: 12px;\n\n  @media (max-width: 768px) {\n    font-size: 16px; \n    margin-left: 8px;\n  }\n`;\n\nconst NavbarRight = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 16px;\n  color: #555;\n\n  @media (${size.tablet}) {\n    font-size: 14px;\n  }\n`;\n\nexport {\n    StyledAvatar,\n    StyledButton,\n    NavbarRight,\n    NavbarContainer,\n    Username,\n    NavbarLeft\n}\n","import { TASKS } from \"./constants\"\nimport { setData } from \"./localStorageUtility\"\n\n\nexport const setTaskDataToStorage = (userId, tasks) => {\n    const storageData = { userId, tasks }\n    setData(TASKS, storageData)\n}","import { setTaskDataToStorage } from '../../utility/utility'\nimport * as actionTypes from './actionTypes'\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const setTasks = (data) => {\n    return {\n        type: actionTypes.SET_TASKS_DATA,\n        tasks: data\n    }\n}\n\nexport const clearData = () =>{\n    return {\n        type: actionTypes.CLEAR_TASK_DATA,\n    }\n}\n\nexport const clearTaskData = () => {\n    return dispatch => {\n        dispatch(clearData())\n    }\n}\n\n\nexport const addTask = ({task, tasks = [], userId}) => {\n    return async dispatch => {\n        const data = {...task,id:uuidv4()}\n        tasks.push(data);\n        dispatch(setTasks(tasks))\n        setTaskDataToStorage(userId,tasks)\n    }\n}\n\nexport const updateTask = ({task,tasks=[],userId}) =>{\n    return async dispatch => {\n        const updatedTasks = tasks.map((item)=>{\n            if(item.id=== task.id){\n                return task\n            }else{\n                return item;\n            }\n        });\n        dispatch(setTasks(updatedTasks))\n        setTaskDataToStorage(userId,updatedTasks)\n    }\n}\n\nexport const deleteTask = ({id,tasks=[],userId}) => {\n    return async dispatch => {\n        let index = tasks.map((item)=>(item.id)).indexOf(id)\n        tasks.splice(index,1);\n        dispatch(setTasks(tasks))\n        setTaskDataToStorage(userId,tasks)\n    }\n}","import React from 'react';\nimport { UserOutlined } from '@ant-design/icons';\nimport { NavbarContainer, NavbarLeft, StyledAvatar, Username, NavbarRight, StyledButton } from './FANavBarStyle';\nimport { getSessionStorageData, removeSessionstorageItem } from '../../utility/localStorageUtility';\nimport { LOGIN } from '../../utility/constants';\nimport { get } from 'lodash';\nimport { useNavigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { clearTaskData } from '../../store/actions/tasks';\n\nconst Navbar = ({clearTasks}) => {\n    const navigate = useNavigate();\n\n    const getUserName = () => {\n       const data = getSessionStorageData(LOGIN);\n       return get(data,\"name\",\"\")\n    }\n    const handleLogout = () => {\n       removeSessionstorageItem(LOGIN)\n       clearTasks()\n       navigate(\"/\")\n    }\n\n    return (\n        <NavbarContainer>\n            <NavbarLeft>\n                <StyledAvatar\n                    size={48}\n                    src={require(\"../../assets/images/profile.png\")}\n                    icon={<UserOutlined />}\n                />\n                <Username>{getUserName()}</Username>\n            </NavbarLeft>\n            <NavbarRight>\n                <StyledButton onClick={()=>{\n                    handleLogout()\n                }} type=\"text\">Logout</StyledButton>\n            </NavbarRight>\n        </NavbarContainer>\n    );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        clearTasks:() => dispatch(clearTaskData())\n    }\n}\n\nexport default connect(null,mapDispatchToProps)(Navbar);","import styled from \"styled-components\";\nimport { size } from \"../../styles/constants\";\nimport { Card, Modal, Row, Checkbox, Typography, Input } from \"antd\";\n\nconst { Text } = Typography;\n\nconst DashboardEmptyContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Montserrat';\n\n  @media (max-width: ${size.tablet}) {\n    justify-content: left;\n    align-items: flex-start ;\n  }\n`\n\nconst DashboardEmptyCard = styled(Card)`\n    justify-content: center;\n    align-items: center;\n    background: #FFFFFF 0% 0% no-repeat padding-box;\n    box-shadow: 0px 3px 6px #0000000A;\n    opacity: 1;\n    margin-top: 10px;\n    width: 100%;\n    text-align: center;\n    height: 158px;\n    padding-bottom: 37px;\n\n    @media (min-width: ${size.tablet}) {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 304px;\n    }\n`\n\nconst DashboardEmptyTitle = styled.div`\n    margin-top: 17px;\n    margin-bottom: 20px;\n    font-size: 20px;\n    color: #537178;\n    text-align: center;\n    letter-spacing: 0px;\n`\nconst StyledDashboardAddEditTaskModalContainer = styled.div`\n    margin-top: -10px;\n`\n\nconst StyledDashboardAddEditTaskModalTitle = styled.div`\n    text-align: left;\n    font-size: 20px;\n    letter-spacing: 0px;\n    color: #537178;\n    opacity: 1;\n`\n\nconst NumberWrapper = styled.div`\n  display: flex;\n  align-items: baseline; \n  font-family: 'Arial', sans-serif;\n`;\n\nconst LargeNumber = styled(Text)`\n  font-size: 64px;  \n  color: #5285EC;  \n  font-weight: bold;\n`;\n\nconst SmallNumber = styled(Text)`\n  font-size: 20px;\n  color: #A0A0A0;  \n  margin-left: 5px; \n`;\n\nconst StyledUl = styled.ul`\n  padding-inline-start: 10px !important;\n  letter-spacing: 0px;\n  color: #8F9EA2;\n  opacity: 1;\n`\n\nconst StyledLi = styled.li`\n    ${({ completed }) => completed && `\n        text-decoration: line-through;\n        color: gray;\n        text-decoration-thickness: 2px;\n    `}\n`\n\nconst StyledDashboardStatusRow = styled(Row)`\n  margin-top: 22px;\n  margin-bottom: 44px;\n  padding-left: 120px;\n  padding-right: 120px;\n  margin-left: 0px !important; \n  margin-right: 0px !important;\n  \n  @media (max-width: ${size.tablet}) {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n`\n\nconst StyledDashboardStatusCard = styled(Card)`\n    height: 158px;\n    box-shadow: 0px 3px 6px #0000000A;\n    border-radius: 12px;\n    background-color: #fff;\n    margin-bottom:0px;\n\n    ${({ center }) => center && `\n        padding-left : 100px\n    `}\n\n    @media (max-width: ${size.tablet}) {\n     margin-bottom: 8px;\n  }\n`\n\nconst StyledDashboardStatusCardTitle = styled.div`\n    text-align: left;\n    letter-spacing: 0px;\n    color: #537178;\n    opacity: 1;\n    font-size: 20px;\n`\n\nconst TaskListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  max-width: 100%;\n  margin-left: 136px;\n  margin-right: 136px;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);\n\n  @media (max-width: ${size.tablet}) {\n    max-width: 100% !important;\n    margin-left: 0px !important;\n    margin-right: 0px !important;\n  }\n`;\n\nconst TaskItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 0;\n  border-bottom: 1px solid #f0f0f0;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst TaskText = styled(Text)`\n  font-size: 16px;\n  margin-left: 10px;\n  color: #5285EC;\n\n  ${({ completed }) => completed && `\n    text-decoration: line-through;\n    color: #537178;\n  `}\n`;\n\nconst ActionIcons = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-right: 35px;\n`;\n\nconst TaskCheckbox = styled(Checkbox)`\n  margin-right: 10px;\n  .ant-checkbox-checked .ant-checkbox-inner {\n    background-color: #fff; \n    border: 2px solid #95A4AB;\n  }\n\n  .ant-checkbox-inner {\n    width: 20px;\n    height: 20px;\n    border: 2px solid #95A4AB;\n  }\n\n  .ant-checkbox-checked::after {\n    border: 3px solid red;\n  }\n`;\n\nconst Chartwrapper = styled.div`\n    display: flex; \n    justify-content: center; \n    align-items: center;\n    flex-direction: column;\n`\n\nconst ChartWrapperInternal = styled.div`\n    position: relative;\n`\n\nconst ChartOuter = styled.div`\n    width: 103px; \n    height: 103px;\n`\n\nconst TaskHeader = styled(Row)`\n  padding: 20px;\n  background-color: #f5f5f5;\n  margin-left: 0px !important;\n  margin-right: 0px !important;\n  padding-left: 120px !important;\n  padding-right: 120px !important;\n\n  @media (max-width: ${size.tablet}) {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n    text-align: center;\n  }\n`;\n\nconst TaskTitle = styled.div`\n  font-size: 20px;\n  color: #537178;\n  margin: 0;\n\n  @media (max-width: ${size.tablet}) {\n    margin-bottom: 10px;\n  }\n`;\n\nconst StyledInput = styled(Input.Search)`\n  width: 290px;\n  margin-right:20px;\n  \n  .ant-input-group-addon {\n    display: none;\n  }\n\n  .ant-input-affix-wrapper {\n    border-radius: 8px !important;\n    border: none !important;\n    background-color: #D9DFEB ;\n    height: 40px;\n  }\n\n  @media (max-width: ${size.tablet}) {\n    margin-bottom: 10px;\n    width: 100%;\n  }\n`;\n\n\nexport {\n    DashboardEmptyContainer,\n    DashboardEmptyCard,\n    DashboardEmptyTitle,\n    StyledDashboardAddEditTaskModalContainer,\n    StyledDashboardAddEditTaskModalTitle,\n    StyledDashboardStatusRow,\n    StyledDashboardStatusCard,\n    TaskListWrapper,\n    TaskItem,\n    TaskText,\n    ActionIcons,\n    TaskCheckbox,\n    StyledDashboardStatusCardTitle,\n    NumberWrapper,\n    LargeNumber,\n    SmallNumber,\n    StyledUl,\n    StyledLi,\n    Chartwrapper,\n    ChartWrapperInternal,\n    ChartOuter,\n    TaskHeader,\n    TaskTitle,\n    StyledInput\n}","import React from \"react\";\nimport { DashboardEmptyCard, DashboardEmptyContainer, DashboardEmptyTitle } from \"./dashboardStyle\";\nimport FAButton from \"../../components/FAButton/FAButton\";\n\nconst DashbordEmpty = ({ onClick }) => {\n    return <DashboardEmptyContainer>\n        <DashboardEmptyCard>\n            <DashboardEmptyTitle>You have no task.</DashboardEmptyTitle>\n            <FAButton onClick={() => onClick(true)} btnText=\"+ New Task\" width=\"124px\" height=\"35px\" />\n        </DashboardEmptyCard>\n    </DashboardEmptyContainer>\n}\n\nexport default DashbordEmpty","import React, { useState, useEffect } from \"react\";\n\nconst useIsMobile = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n\n    const handleWindowSizeChange = () => {\n        setWidth(window.innerWidth);\n    }\n    useEffect(() => {\n        window.addEventListener('resize', handleWindowSizeChange);\n        return () => {\n            window.removeEventListener('resize', handleWindowSizeChange);\n        }\n    }, []);\n\n    const isMobile = width < 1024;\n\n    return isMobile\n}\n\nexport default useIsMobile;","import * as Yup from 'yup'\n\nconst taskValidationSchema = Yup.object().shape({\n    name:Yup.string().required(\"This Feild is Required!\")\n})\n\n\nexport default taskValidationSchema","import React from 'react';\nimport {  Modal } from 'antd';\nimport useIsMobile from '../../hooks/useIsMobile';\nimport { StyledDashboardAddEditTaskModalTitle } from './dashboardStyle';\nimport FAInput from '../../components/FAInput/FAInput';\nimport FAButton from '../../components/FAButton/FAButton';\nimport { get, isEmpty } from 'lodash';\nimport { useFormik } from 'formik';\nimport taskValidationSchema from './taskValidationSchema';\n\nconst DashboardAddTaskEditModal = ({ openModal, submitTask, editTask, rowData }) => {\n    const isMobile = useIsMobile()\n    const formik = useFormik({\n        initialValues: {\n            id: get(rowData, \"id\", \"\"),\n            name: get(rowData, \"name\", \"\"),\n            status: get(rowData, \"status\", \"\")\n        },\n        enableReinitialize: true,\n        validationSchema: taskValidationSchema,\n        onSubmit: (values, { resetForm }) => {\n            if (isEmpty(rowData)) {\n                submitTask({\n                    ...values,\n                    status: 0\n                })\n                resetForm()\n            } else {\n                editTask({\n                    ...rowData, ...values\n                })\n                resetForm()\n            }\n\n        },\n    });\n\n    return (\n        <Modal closable={false} width={!isMobile ? 296 : '100%'} centered={!isMobile} title={<StyledDashboardAddEditTaskModalTitle>+ New Task</StyledDashboardAddEditTaskModalTitle>} open={openModal} footer={null}>\n            <FAInput value={formik.values.name} type=\"text\" placeholder=\"Task Name\" id=\"name\" name=\"name\" onChange={formik.handleChange} />\n            <FAButton width=\"100%\" height=\"40px\" btnText={isEmpty(rowData) ? \"+ New Task\" : \"Update Task\"} onClick={formik.handleSubmit} />\n        </Modal>\n    )\n}\n\nexport default DashboardAddTaskEditModal;","import React, { useMemo } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { get } from 'lodash';\nimport { Chartwrapper,ChartWrapperInternal,ChartOuter } from './dashboardStyle';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst Chart = ({ tasks = [] }) => {\n\n    const calculateDataSet = () => {\n        const completedTask = tasks.filter((item) => get(item, \"status\", 0)).length;\n        const total = tasks.length;\n        const remainingTask = total - completedTask;\n        const completedPrecentage = (completedTask / total) * 100;\n        const remainingTaskPrecentage = (remainingTask / total) * 100\n        return [completedPrecentage, remainingTaskPrecentage]\n    }\n\n    const getPrecentages = useMemo(\n        () => calculateDataSet(),\n        [tasks]\n    );\n\n    const data = {\n        labels: ['Completed Tasks', 'Remaining Tasks'],\n        datasets: [\n            {\n                data: getPrecentages,\n                backgroundColor: ['#5285EC', '#E8ECEC'],\n                borderWidth: 3,\n            },\n        ],\n    };\n\n    const options = {\n        plugins: {\n            legend: {\n                display: false,\n            },\n            tooltip: { enabled: false },\n        },\n    };\n\n    return (\n        <Chartwrapper>\n            <ChartWrapperInternal>\n                <ChartOuter>\n                    <Pie data={data} options={options} />\n                </ChartOuter>\n            </ChartWrapperInternal>\n        </Chartwrapper>\n    );\n}\n\nexport default Chart;","import React from \"react\";\nimport { Col } from \"antd\";\nimport { StyledDashboardStatusRow, StyledDashboardStatusCard, StyledDashboardStatusCardTitle, NumberWrapper, LargeNumber, SmallNumber, StyledUl, StyledLi } from \"./dashboardStyle\";\nimport { get } from \"lodash\";\nimport Chart from \"./Chart\";\n\nconst DashboardStatus = ({ tasks = [] }) => {\n    const getCompletedTasks = () => {\n        return tasks.filter((item) => get(item, \"status\", 0)).length\n    }\n\n    const getLatestTasks = () => {\n        return [...tasks.slice(Math.max(tasks.length - 3, 0))].reverse();\n    }\n\n    return (\n        <StyledDashboardStatusRow gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                <StyledDashboardStatusCard>\n                    <StyledDashboardStatusCardTitle>Tasks Completed</StyledDashboardStatusCardTitle>\n                    <NumberWrapper>\n                        <LargeNumber>{getCompletedTasks()}</LargeNumber>\n                        <SmallNumber>/ {tasks.length}</SmallNumber>\n                    </NumberWrapper>\n                </StyledDashboardStatusCard>\n            </Col>\n            <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                <StyledDashboardStatusCard>\n                    <StyledDashboardStatusCardTitle>Latest Created Tasks</StyledDashboardStatusCardTitle>\n                    <StyledUl>{getLatestTasks().map((item, index) => <StyledLi key={index} completed={get(item, \"status\", 0)}>{get(item, \"name\", \"\")}</StyledLi>)}</StyledUl>\n                </StyledDashboardStatusCard>\n            </Col>\n            <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                <StyledDashboardStatusCard center=\"true\">\n                    <Chart tasks={tasks} />\n                </StyledDashboardStatusCard>\n            </Col>\n        </StyledDashboardStatusRow>\n    )\n}\n\nexport default React.memo(DashboardStatus);","import React from 'react';\nimport { TaskListWrapper, TaskCheckbox, TaskItem, TaskText, ActionIcons } from './dashboardStyle';\nimport { Image } from 'antd';\nimport Icon from '@ant-design/icons/lib/components/Icon';\nimport { get } from 'lodash';\n\nconst DashboardTaskList = ({ tasks=[], removeTask, setOpenAddEditTaskModal, setRowData,completeTheTask }) => {\n  const getTasksReverse = () => {\n    return [...tasks].reverse()\n  }\n  return (\n    <TaskListWrapper>\n      {getTasksReverse().map((task, index) => (\n        <TaskItem key={index}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <TaskCheckbox\n              onChange={(e)=>completeTheTask(e,task)}\n              checked={get(task, \"status\", 0)}\n              completed={get(task, \"status\", 0)}\n              disabled={get(task, \"status\", 0) == 1}\n            />\n            <TaskText completed={get(task, \"status\", 0)}>{get(task, \"name\")}</TaskText>\n          </div>\n          <ActionIcons>\n            <Icon onClick={() => {\n              setRowData({ ...task })\n              setOpenAddEditTaskModal(true)\n            }} component={() => <Image width={18} height={18} preview={false} src={require(\"../../assets/images/pen-solid.png\")} />} ></Icon>\n            <Icon onClick={() => removeTask(task.id)} component={() => <Image width={18} height={18} preview={false} src={require(\"../../assets/images/trash-solid.png\")} />} ></Icon>\n          </ActionIcons>\n        </TaskItem>\n      ))}\n    </TaskListWrapper>\n  );\n};\n\nexport default DashboardTaskList;\n","import React from 'react';\nimport FAButton from \"../../components/FAButton/FAButton\";\nimport { TaskHeader, TaskTitle, StyledInput } from './dashboardStyle';\nimport useIsMobile from '../../hooks/useIsMobile';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Col } from 'antd';\n\nconst TaskHeaderComponent = ({ onClick,onSearch,handleChangeSearch,searchData }) => {\n    const isMobile = useIsMobile();\n    return (\n        <TaskHeader gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                <TaskTitle>Tasks</TaskTitle>\n            </Col>\n            <Col xs={24} sm={24} md={24} lg={9} xl={9}>\n            </Col>\n            <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                <StyledInput value={searchData} onChange={handleChangeSearch} onSearch={(data)=>onSearch(data)} allowClear prefix={<SearchOutlined width={16} />} suffix={null} placeholder=\"Search by task name\" />\n            </Col>\n            <Col xs={24} sm={24} md={24} lg={3} xl={3}>\n                <FAButton onClick={() => onClick(true)} height=\"40px\" width={isMobile ? \"100%\" : \"120px\"} btnText=\"+ New Task\" />\n            </Col>\n        </TaskHeader>\n    );\n};\n\nexport default TaskHeaderComponent;\n","import React, { useEffect, useState } from \"react\";\nimport Navbar from \"../../components/FANavBar/FANavBar\";\nimport DashbordEmpty from \"./DashboardEmpty\";\nimport { connect } from \"react-redux\";\nimport { addTask, deleteTask, updateTask } from \"../../store/actions/tasks\";\nimport DashboardAddTaskEditModal from \"./DashboardAddTaskEditModal\";\nimport FALoading from \"../../components/FALoading/FALoading\";\nimport { getSessionStorageData } from \"../../utility/localStorageUtility\";\nimport { LOGIN } from \"../../utility/constants\";\nimport { get, isEmpty } from \"lodash\";\nimport DashboardStatus from \"./DashboardStatus\";\nimport DashboardTaskList from \"./DashboardTaskList\";\nimport TaskHeaderComponent from \"./TaskHeader\";\n\nconst DashboardContainer = ({ tasksData = [], addTaskAction, updateTaskAction, deleteTaskAction }) => {\n    const [openAddEditTaskModal, setOpenAddEditTaskModal] = useState(false);\n    const [loading, setLoading] = useState(false)\n    const [userId, setUserId] = useState(null)\n    const [rowData, setRowData] = useState(null)\n    const [tasks, setTasks] = useState([])\n    const [searchData, setSearchData] = useState(\"\")\n\n    useEffect(() => {\n        const userData = getSessionStorageData(LOGIN);\n        if (!isEmpty(userData)) {\n            const loggedId = get(userData, \"id\", null)\n            setUserId(loggedId)\n        }\n    }, [])\n\n    useEffect(() => {\n        setTasks([...tasksData])\n        if (!isEmpty(searchData)) {\n            setSearchData(\"\")\n        }\n    }, [tasksData])\n\n    const submitTask = (values) => {\n        setLoading(true)\n        addTaskAction({ task: values, tasks: tasksData, userId })\n        setOpenAddEditTaskModal(false)\n        clearLoading()\n    }\n\n    const clearLoading = () => {\n        setTimeout(() => {\n            setLoading(false)\n        }, 1000)\n    }\n\n    const editTask = (values) => {\n        setLoading(true)\n        updateTaskAction({ task: values, tasks: tasksData, userId })\n        setOpenAddEditTaskModal(false)\n        setRowData(null)\n        clearLoading()\n    }\n\n    const completeTheTask = (e, values) => {\n        const updatedValues = { ...values, status: e.target.checked ? 1 : 0 }\n        editTask(updatedValues)\n    }\n\n    const removeTask = (index) => {\n        setLoading(true)\n        deleteTaskAction({ index, tasks: tasksData, userId })\n        clearLoading()\n    }\n\n    const searchTask = (data) => {\n        setSearchData(data)\n        if (!isEmpty(data)) {\n            const filteredData = tasks.filter(task => task.name.toLowerCase().includes(data.toLowerCase()))\n            setTasks([...filteredData])\n        }\n        else {\n            setTasks([...tasksData])\n        }\n\n    }\n\n    const handleChangeSearch = (e) => {\n        setSearchData(e.target.value);\n    }\n\n    return <>\n        <Navbar />\n        <FALoading open={loading} />\n        {tasks.length === 0 && isEmpty(searchData) && <DashbordEmpty onClick={setOpenAddEditTaskModal} />}\n        {tasks && tasks.length > 0 &&\n            <>\n                <DashboardStatus tasks={tasks} />\n                <TaskHeaderComponent searchData={searchData} handleChangeSearch={handleChangeSearch} onSearch={searchTask} onClick={setOpenAddEditTaskModal} />\n                <DashboardTaskList completeTheTask={completeTheTask} setOpenAddEditTaskModal={setOpenAddEditTaskModal} setRowData={setRowData} removeTask={removeTask} tasks={tasks} />\n            </>\n        }\n        <DashboardAddTaskEditModal rowData={rowData} submitTask={submitTask} editTask={editTask} openModal={openAddEditTaskModal} />\n    </>\n}\n\nconst mapStateToProps = state => ({\n    tasksData: state.task.tasks\n})\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTaskAction: data => dispatch(addTask(data)),\n        updateTaskAction: data => dispatch(updateTask(data)),\n        deleteTaskAction: data => dispatch(deleteTask(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardContainer);","export const size = {\n    mobile: \"576px\",\n    tablet: \"992px\",\n    laptop: \"1024px\",\n    desktop: \"2560px\",\n  }"],"names":["StyledButton","styled","Button","props","width","height","_ref","btnText","onClick","_jsx","children","StyledInput","Input","placeholder","onChange","type","name","id","value","variant","NavbarContainer","header","size","tablet","NavbarLeft","div","StyledAvatar","Avatar","Username","span","NavbarRight","setTaskDataToStorage","userId","tasks","storageData","setData","TASKS","setTasks","data","actionTypes","clearTaskData","dispatch","connect","clearTasks","navigate","useNavigate","_jsxs","src","require","icon","UserOutlined","getUserName","getSessionStorageData","LOGIN","get","removeSessionstorageItem","Text","Typography","DashboardEmptyContainer","DashboardEmptyCard","Card","DashboardEmptyTitle","StyledDashboardAddEditTaskModalTitle","NumberWrapper","LargeNumber","SmallNumber","StyledUl","ul","StyledLi","li","completed","StyledDashboardStatusRow","Row","StyledDashboardStatusCard","_ref2","center","StyledDashboardStatusCardTitle","TaskListWrapper","TaskItem","TaskText","_ref3","ActionIcons","TaskCheckbox","Checkbox","Chartwrapper","ChartWrapperInternal","ChartOuter","TaskHeader","TaskTitle","Search","FAButton","useIsMobile","setWidth","useState","window","innerWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","Yup","shape","required","openModal","submitTask","editTask","rowData","isMobile","formik","useFormik","initialValues","status","enableReinitialize","validationSchema","taskValidationSchema","onSubmit","values","resetForm","isEmpty","Modal","closable","centered","title","open","footer","FAInput","handleChange","handleSubmit","ChartJS","register","ArcElement","Tooltip","Legend","labels","datasets","useMemo","calculateDataSet","completedTask","filter","item","length","total","backgroundColor","borderWidth","Pie","options","plugins","legend","display","tooltip","enabled","DashboardStatus","gutter","xs","sm","md","lg","Col","xl","slice","Math","max","reverse","map","index","Chart","React","removeTask","setOpenAddEditTaskModal","setRowData","completeTheTask","task","style","alignItems","e","checked","disabled","Icon","component","Image","preview","onSearch","handleChangeSearch","searchData","allowClear","prefix","SearchOutlined","suffix","state","tasksData","addTaskAction","async","uuidv4","push","addTask","updateTaskAction","updatedTasks","updateTask","deleteTaskAction","indexOf","splice","deleteTask","openAddEditTaskModal","loading","setLoading","setUserId","setSearchData","userData","loggedId","clearLoading","setTimeout","_Fragment","Navbar","FALoading","DashbordEmpty","TaskHeaderComponent","target","filteredData","toLowerCase","includes","DashboardTaskList","updatedValues","DashboardAddTaskEditModal","mobile","laptop","desktop"],"sourceRoot":""}